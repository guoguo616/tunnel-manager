name: Build and Release with PyInstaller

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: 安装 Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: 安装 Poetry
      run: |
        pip install poetry

    - name: 设置缓存
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~\AppData\Local\pypoetry\Cache
          **\*.lock
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: 获取版本号
      id: get_version
      shell: powershell
      run: |
        $VERSION = (poetry version -s)
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: 安装依赖
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install

    - name: 使用 PyInstaller 构建
      run: |
        poetry run pyinstaller tunnel-manager.spec

    - name: 创建发布
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 上传构建产物到发布
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/TunnelManager.exe
        asset_name: TunnelManager-${{ env.VERSION }}.exe
        asset_content_type: application/octet-stream
        token: ${{ secrets.GITHUB_TOKEN }}
